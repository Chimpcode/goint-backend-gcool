# The following types define the data model of the example service
# based on which the GraphQL API is generated
type Location @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    longitude: Float!
    latitude: Float!

    address: String

    storesAttached: [Store!]! @relation(name: "LocationsStore")
}

type Store @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    name: String!
    description: String

    locations: [Location!]! @relation(name: "LocationsStore")
    sectorsAttached: [Sector!]! @relation(name: "SectorStores")

    postsAssigned: [Post!]! @relation(name: "PostStore")
}

type Sector @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    name: String!
    tags: [String!]

    stores: [Store!]! @relation(name: "SectorStores")

    postsAssigned: [Post!]! @relation(name: "PostSectors")
}

type User @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    group: String

    fullName: String!
    age: Int
    gender: String

    loginType: String

    email: String! @isUnique
    username: String! @isUnique
    password: String!

    facebookAccount: String @isUnique

    myPromotions: [Post!]! @relation(name: "promotionsLikeByUsers")

}

type CompanyCategory @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    name: String!
    alias: String

    tags: [String!]

    companiesAttached: [Company!]! @relation(name: "CompanyCategories")
}

type Plan @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    type: String!
    duration: Int!

    subscribedCompanies: [Company!]! @relation(name: "CompanyPlan")
}



type LegalAddress @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    country: String!
    region: String!
    province: String
    city: String!

    address: String!

    zip: String
    postalCode: String

    companyAttached: Company! @relation(name: "CompanyLegalAddress")
}

type Company @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    ruc: String! @isUnique
    socialReason: String! @isUnique

    commercialName: String!
    optionalName: String

    categories: [CompanyCategory!]! @relation(name: "CompanyCategories")

    postCount: Int @defaultValue(value: 0)
    activePlan: Plan! @relation(name: "CompanyPlan")

    posts: [Post!]! @relation(name: "CompanyPosts")

    legalAddress: LegalAddress! @relation(name: "CompanyLegalAddress")

    logoImage: String! @defaultValue(value: "http://13.90.253.208:9300/api/v1/i/milkyway/default.png") # @migrationValue(value: "http://13.90.253.208:9300/api/v1/i/milkyway/default.png")
    email: String! @isUnique
    password: String!

    termsAndConditions: String! @migrationValue(value: "blblblbl...")
    staticPhone: String!
    movilPhone: String!

}

type KindOfPublic @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    minAge: Int! @defaultValue(value: 0)
    maxAge: Int! @defaultValue(value: 100)

    gender: String! @defaultValue(value: "all")

    availableDays: String! @defaultValue(value: "L,M,X,J,V,S,D") # L,M,X,J,V,S,D
    lowerHour: String! @defaultValue(value: "00:00") # HH:MM
    upperHour: String! @defaultValue(value: "23:59") # HH:MM

    postAttached: Post @relation(name: "PublicForPost")
}

type Post @model {
    id: ID! @isUnique    # read-only (managed by Graphcool)
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    expireAt: DateTime
    isActive: Boolean  # @migrationValue(value: true)

    by: Company! @relation(name: "CompanyPosts")

    title: String! @defaultValue(value: "Untitle Post")
    type: String
    image: String
    description: String
    address: String

    shows: Int! @defaultValue(value: 0)

    targetPublic: KindOfPublic! @relation(name: "PublicForPost")
    tags: String! #@migrationValue(value: "")

    locationBySectors: [Sector!]! @relation(name: "PostSectors")
    locationByStores: [Store!]! @relation(name: "PostStore")

    usersLiked: User @relation(name: "promotionsLikeByUsers")
    stock: Int! @defaultValue(value: 0)
}
